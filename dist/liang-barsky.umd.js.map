{"version":3,"file":"liang-barsky.umd.js","sources":["../src/liang-barsky.ts"],"sourcesContent":["/**\n * @preserve\n * Fast, destructive implemetation of Liang-Barsky line clipping algorithm.\n * It clips a 2D segment by a rectangle.\n * @author Alexander Milevski <info@w8r.name>\n * @license MIT\n */\n\nconst EPSILON = 1e-6;\nconst INSIDE  = 1;\nconst OUTSIDE = 0;\n\ntype Point = Array<number>;\ntype BoundingBox = Array<number>;\n\nfunction clipT(num:number, denom:number, c:Point) {\n  const [tE, tL] = c;\n  if (Math.abs(denom) < EPSILON) return num < 0;\n  const t = num / denom;\n\n  if (denom > 0) {\n    if (t > tL) return 0;\n    if (t > tE) c[0] = t;\n  } else {\n    if (t < tE) return 0;\n    if (t < tL) c[1] = t;\n  }\n  return 1;\n}\n\n\n/**\n * @param  {Array<number>} a\n * @param  {Array<number>} b\n * @param  {Array<number>} box [xmin, ymin, xmax, ymax]\n * @param  {Array<number>} [da]\n * @param  {Array<number>} [db]\n * @return {number}\n */\nexport default function clip(a:Point, b:Point, box:BoundingBox, da?:Point, db?:Point) {\n  const [x1, y1] = a;\n  const [x2, y2] = b;\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n\n  if (da === undefined || db === undefined) {\n    da = a;\n    db = b;\n  } else {\n    da[0] = a[0];\n    da[1] = a[1];\n    db[0] = b[0];\n    db[1] = b[1];\n  }\n\n  if (Math.abs(dx) < EPSILON && Math.abs(dy) < EPSILON &&\n      x1 >= box[0] && x1 <= box[2] &&\n      y1 >= box[1] && y1 <= box[3]) {\n    return INSIDE;\n  }\n\n  const c = [0, 1];\n  if (clipT(box[0] - x1,  dx, c) &&\n      clipT(x1 - box[2], -dx, c) &&\n      clipT(box[1] - y1,  dy, c) &&\n      clipT(y1 - box[3], -dy, c)) {\n    const [tE, tL] = c;\n    if (tL < 1) {\n      db[0] = (x1 + tL * dx);\n      db[1] = (y1 + tL * dy);\n    }\n    if (tE > 0) {\n      da[0] += tE * dx;\n      da[1] += tE * dy;\n    }\n    return INSIDE;\n  }\n  return OUTSIDE;\n}\n"],"names":[],"mappings":"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"}